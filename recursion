package day08;

import java.util.Arrays;

public class main {
    public static void main(String[] args) {
        System.out.println(rabbit(6));

    }

    public static void recursion(String name, int length) {
        if (length == name.length()) return;
        recursion(name, length + 1);
        System.out.printf("%c", name.charAt(length));
    }

    public static int recursion(int[] arr, int target, int i, int j) {
        if (i > j) return -1;
        int m = i + (j - i) / 2;
        if (target < arr[m]) return recursion(arr, target, i, m - 1);
        else if (target == arr[m]) return m;
        else return recursion(arr, target, m + 1, j);

    }

    public static void bobbleSort(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int i1 = 0; i1 < arr.length - 1 - i; i1++) {
                if (arr[i1] > arr[i1 + 1]) {
                    int temp = arr[i1];
                    arr[i1] = arr[i1 + 1];
                    arr[i1 + 1] = temp;
                }
            }
        }
    }

    public static void recursion(int[] arr, int j) {
        if (j == 0) return;
        int x = 0;
        for (int i = 0; i < j; i++) {
            if (arr[i] > arr[i + 1]) {
                int temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
                x = i;
            }
        }
        recursion(arr, x);
    }

    public static void insertion(int[] arr, int low) {
        if (low == arr.length) return;
        int temp = arr[low];
        int i = low - 1;
        while (i >= 0 && temp < arr[i]) {
            arr[i + 1] = arr[i];
            i--;
        }

        arr[i + 1] = temp;
        insertion(arr, low + 1);
    }

    public static int fibonacci(int num) {
        if (num == 0) return 0;
        else if (num == 1) return 1;
        return fibonacci(num - 1) + fibonacci(num - 2);
    }

    public static int rabbit(int num) {
        if (num == 1) return 1;
        else if (num == 2) return 1;
        return rabbit(num - 1) + rabbit(num - 2);
    }
}
