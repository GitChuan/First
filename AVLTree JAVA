package AVLTree;

public class AVLTree {
    private AVLNode root;

    private static class AVLNode {
        int key;
        Object val;
        AVLNode left;
        AVLNode right;
        int height = 1;

        public AVLNode() {
        }

        public AVLNode(int key, Object val) {
            this.key = key;
            this.val = val;
        }

        public AVLNode(int key) {
            this.key = key;
        }

        public AVLNode(AVLNode right, AVLNode left, Object val, int key) {
            this.right = right;
            this.left = left;
            this.val = val;
            this.key = key;
        }
    }

    public AVLNode getRoot() {
        return root;
    }

    private int height(AVLNode node) {
        return node == null ? 0 : node.height;
    }

    private void updateHeight(AVLNode node) {
        node.height = Integer.max(height(node.left), height(node.right) + 1);
    }

    private int balanceFactor(AVLNode node) {
        return height(node.left) - height(node.right);
    }

    private AVLNode rightRotate(AVLNode node) {
        AVLNode leftSon = node.left;
        node.left = leftSon.right;
        leftSon.right = node;
        updateHeight(node);
        updateHeight(leftSon);
        return leftSon;
    }

    private AVLNode leftRotate(AVLNode node) {
        AVLNode rightSon = node.right;
        node.right = rightSon.left;
        rightSon.left = node;
        updateHeight(node);
        updateHeight(rightSon);
        return rightSon;
    }

    private AVLNode leftRightRotate(AVLNode node) {
        node.left = leftRotate(node.left);
        return rightRotate(node);
    }

    private AVLNode rightLeftRotate(AVLNode node) {
        node.right = rightRotate(node.right);
        return leftRotate(node);
    }

    private AVLNode balance(AVLNode node) {
        if (node == null) return null;

        int balanceFactor = balanceFactor(node);
        if (balanceFactor > 1 && balanceFactor(node.left) >= 0) {
            return rightRotate(node);
        } else if (balanceFactor > 1 && balanceFactor(node.left) < 0) {
            return leftRightRotate(node);
        } else if (balanceFactor < -1 && balanceFactor(node.right) > 0) {
            return rightLeftRotate(node);
        } else if (balanceFactor < -1 && balanceFactor(node.right) <= 0) {
            return leftRotate(node);
        }

        return node;
    }

    public void put(int key, Object val) {
        root = doPut(root, key, val);
    }

    private AVLNode doPut(AVLNode node, int key, Object val) {
        if (node == null) {
            return new AVLNode(key, val);
        }
        if (node.key == key) {
            node.val = val;
            return node;
        }

        if (key < node.key) {
            node.left = doPut(node.left, key, val);
        } else {
            node.right = doPut(node.right, key, val);
        }

        updateHeight(node);
        return balance(node);
    }

    public void remove(int key){
        root = doRemove(root, key);
    }

    private AVLNode doRemove(AVLNode node, int key){
        if(node == null) return null;
        if(key < node.key){
            node.left = doRemove(node.left, key);
        } else if(node.key < key){
            node.right = doRemove(node.right, key);
        } else {
            if(node.left == null && node.right == null){
                return null;
            } else if(node.left == null){
                node = node.right;
            } else if(node.right == null){
                node = node.left;
            } else {
                AVLNode p = node.right;
                while (p.left != null){
                    p = p.left;
                }
                // p is the successor
                p.right = doRemove(node.right, p.key);
                p.left = node.left;
                node = p;
            }
        }
        updateHeight(node);
        balance(node);
        return node;
    }
}
